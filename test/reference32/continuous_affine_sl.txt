julia> @finch_code begin
        z1 .= 0
        for i = _
            z1[] += x[2i + 10]
        end
    end
quote
    z1 = (ex.bodies[1]).tns.bind
    x_lvl = (ex.bodies[2]).body.rhs.tns.bind.lvl
    x_lvl_ptr = x_lvl.ptr
    x_lvl_idx = x_lvl.idx
    x_lvl_val = x_lvl.lvl.val
    i_stop = 0.5f0 * (x_lvl.shape + -10)
    z1_val = 0
    x_lvl_q = x_lvl_ptr[1]
    x_lvl_q_stop = x_lvl_ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i1 = x_lvl_idx[x_lvl_q_stop - 1]
    else
        x_lvl_i1 = 0.0f0
    end
    phase_stop = min(i_stop, 0.5f0 * (-10 + x_lvl_i1))
    if phase_stop >= -4.5f0
        i = -4.5f0
        if x_lvl_idx[x_lvl_q] < 10 + 2 * -4.5f0
            x_lvl_q = Finch.scansearch(x_lvl_idx, 10 + 2 * -4.5f0, x_lvl_q, x_lvl_q_stop - 1)
        end
        while true
            x_lvl_i = x_lvl_idx[x_lvl_q]
            phase_stop_2 = 0.5f0 * (-10 + x_lvl_i)
            if phase_stop_2 < phase_stop
                x_lvl_2_val = x_lvl_val[x_lvl_q]
                z1_val = x_lvl_2_val + z1_val
                x_lvl_q += 1
                i = phase_stop_2 + limit(0+ϵ)
            else
                phase_stop_3 = min(phase_stop, 0.5f0 * (-10 + x_lvl_i))
                if phase_stop_3 >= i
                    if x_lvl_i == 10 + 2phase_stop_3
                        x_lvl_2_val = x_lvl_val[x_lvl_q]
                        z1_val = z1_val + x_lvl_2_val
                        x_lvl_q += 1
                    end
                    i = phase_stop_3 + limit(0+ϵ)
                end
                break
            end
        end
    end
    (z1 = (Scalar){0, Int32}(z1_val),)
end
julia> @finch begin
        z1 .= 0
        for i = _
            z1[] += x[2i + 10]
        end
    end
(z1 = Scalar{0, Int32}(20),)

