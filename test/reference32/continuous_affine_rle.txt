julia> @finch_code begin
        z1 .= 0
        for i = _
            z2[] += y[2i + 10]
        end
    end
quote
    z1 = (ex.bodies[1]).tns.bind
    z2 = (ex.bodies[2]).body.lhs.tns.bind
    z2_val = z2.val
    y_lvl = (ex.bodies[2]).body.rhs.tns.bind.lvl
    y_lvl_ptr = y_lvl.ptr
    y_lvl_left = y_lvl.left
    y_lvl_right = y_lvl.right
    y_lvl_val = y_lvl.lvl.val
    i_stop = 0.5f0 * (y_lvl.shape + -10)
    y_lvl_q = y_lvl_ptr[1]
    y_lvl_q_stop = y_lvl_ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i_end = y_lvl_right[y_lvl_q_stop - 1]
    else
        y_lvl_i_end = 0.0f0
    end
    phase_stop = min(i_stop, 0.5f0 * (-10 + y_lvl_i_end))
    if phase_stop >= -4.5f0
        i = -4.5f0
        if y_lvl_right[y_lvl_q] < 10 + 2 * -4.5f0
            y_lvl_q = Finch.scansearch(y_lvl_right, 10 + 2 * -4.5f0, y_lvl_q, y_lvl_q_stop - 1)
        end
        while true
            y_lvl_i_start = y_lvl_left[y_lvl_q]
            y_lvl_i_stop = y_lvl_right[y_lvl_q]
            phase_start_2 = i
            phase_stop_2 = 0.5f0 * (-10 + y_lvl_i_stop)
            if phase_stop_2 < phase_stop
                phase_start_4 = max(phase_start_2, 0.5f0 * (y_lvl_i_start + limit(-10)))
                if phase_stop_2 >= phase_start_4
                    y_lvl_2_val = y_lvl_val[y_lvl_q]
                    cond = -phase_start_4 + phase_stop_2 == 0
                    if cond
                        z2_val = y_lvl_2_val + z2_val
                    end
                end
                y_lvl_q += y_lvl_i_stop == y_lvl_i_stop
                i = phase_stop_2 + limit(0+ϵ)
            else
                phase_start_5 = i
                phase_stop_5 = min(phase_stop, 0.5f0 * (-10 + y_lvl_i_stop))
                if phase_stop_5 >= i
                    phase_start_7 = max(0.5f0 * (y_lvl_i_start + limit(-10)), phase_start_5)
                    if phase_stop_5 >= phase_start_7
                        y_lvl_2_val_2 = y_lvl_val[y_lvl_q]
                        cond_2 = -phase_start_7 + phase_stop_5 == 0
                        if cond_2
                            z2_val = z2_val + y_lvl_2_val_2
                        end
                    end
                    y_lvl_q += 10 + 2phase_stop_5 == y_lvl_i_stop
                    i = phase_stop_5 + limit(0+ϵ)
                end
                break
            end
        end
    end
    (z1 = (Scalar){0, Int32}(0), z2 = (Scalar){0, Int32}(z2_val))
end
julia> @finch begin
        z1 .= 0
        for i = _
            z2[] += y[2i + 10]
        end
    end
(z1 = Scalar{0, Int32}(0), z2 = Scalar{0, Int32}(20))

