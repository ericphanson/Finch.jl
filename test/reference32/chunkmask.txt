chunkmask tests
julia> A = Tensor(Dense(Dense(Element(0.0))), 15, 3)
Dense [:,1:3]
├─ [:, 1]: Dense [1:15]
│  ├─ [1]: 0.0
│  ├─ [2]: 0.0
│  ├─ [3]: 0.0
│  ├─ [4]: 0.0
│  ├─ [5]: 0.0
│  ├─ [6]: 0.0
│  ├─ [7]: 0.0
│  ├─ [8]: 0.0
│  ├─ [9]: 0.0
│  ├─ [10]: 0.0
│  ├─ [11]: 0.0
│  ├─ [12]: 0.0
│  ├─ [13]: 0.0
│  ├─ [14]: 0.0
│  └─ [15]: 0.0
├─ [:, 2]: Dense [1:15]
│  ├─ [1]: 0.0
│  ├─ [2]: 0.0
│  ├─ [3]: 0.0
│  ├─ [4]: 0.0
│  ├─ [5]: 0.0
│  ├─ [6]: 0.0
│  ├─ [7]: 0.0
│  ├─ [8]: 0.0
│  ├─ [9]: 0.0
│  ├─ [10]: 0.0
│  ├─ [11]: 0.0
│  ├─ [12]: 0.0
│  ├─ [13]: 0.0
│  ├─ [14]: 0.0
│  └─ [15]: 0.0
└─ [:, 3]: Dense [1:15]
   ├─ [1]: 0.0
   ├─ [2]: 0.0
   ├─ [3]: 0.0
   ├─ [4]: 0.0
   ├─ [5]: 0.0
   ├─ [6]: 0.0
   ├─ [7]: 0.0
   ├─ [8]: 0.0
   ├─ [9]: 0.0
   ├─ [10]: 0.0
   ├─ [11]: 0.0
   ├─ [12]: 0.0
   ├─ [13]: 0.0
   ├─ [14]: 0.0
   └─ [15]: 0.0

julia> @finch begin
        let m = Finch.chunkmask(5, 1:15)
            for i = _
                for j = _
                    A[j, i] = m[j, i]
                end
            end
        end
    end
NamedTuple()
julia> AsArray(A)
15×3 AsArray{Float64, 2, Tensor{DenseLevel{Int32, DenseLevel{Int32, ElementLevel{0.0, Float64, Int32, Vector{Float64}}}}}}:
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
julia> A = Tensor(Dense(Dense(Element(0.0))), 14, 3)
Dense [:,1:3]
├─ [:, 1]: Dense [1:14]
│  ├─ [1]: 0.0
│  ├─ [2]: 0.0
│  ├─ [3]: 0.0
│  ├─ [4]: 0.0
│  ├─ [5]: 0.0
│  ├─ [6]: 0.0
│  ├─ [7]: 0.0
│  ├─ [8]: 0.0
│  ├─ [9]: 0.0
│  ├─ [10]: 0.0
│  ├─ [11]: 0.0
│  ├─ [12]: 0.0
│  ├─ [13]: 0.0
│  └─ [14]: 0.0
├─ [:, 2]: Dense [1:14]
│  ├─ [1]: 0.0
│  ├─ [2]: 0.0
│  ├─ [3]: 0.0
│  ├─ [4]: 0.0
│  ├─ [5]: 0.0
│  ├─ [6]: 0.0
│  ├─ [7]: 0.0
│  ├─ [8]: 0.0
│  ├─ [9]: 0.0
│  ├─ [10]: 0.0
│  ├─ [11]: 0.0
│  ├─ [12]: 0.0
│  ├─ [13]: 0.0
│  └─ [14]: 0.0
└─ [:, 3]: Dense [1:14]
   ├─ [1]: 0.0
   ├─ [2]: 0.0
   ├─ [3]: 0.0
   ├─ [4]: 0.0
   ├─ [5]: 0.0
   ├─ [6]: 0.0
   ├─ [7]: 0.0
   ├─ [8]: 0.0
   ├─ [9]: 0.0
   ├─ [10]: 0.0
   ├─ [11]: 0.0
   ├─ [12]: 0.0
   ├─ [13]: 0.0
   └─ [14]: 0.0

julia> @finch begin
        let m = Finch.chunkmask(5, 1:14)
            for i = _
                for j = _
                    A[j, i] = m[j, i]
                end
            end
        end
    end
NamedTuple()
julia> AsArray(A)
14×3 AsArray{Float64, 2, Tensor{DenseLevel{Int32, DenseLevel{Int32, ElementLevel{0.0, Float64, Int32, Vector{Float64}}}}}}:
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0

