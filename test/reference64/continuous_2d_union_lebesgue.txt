julia> @finch_code begin
        s .= 0
        for i = _, j = _
            s[] += (x[j, i] + y[j, i]) * d(i, j)
        end
    end
quote
    s = (ex.bodies[1]).tns.bind
    x_lvl = (((ex.bodies[2]).body.body.rhs.args[1]).args[1]).tns.bind.lvl
    x_lvl_ptr = x_lvl.ptr
    x_lvl_left = x_lvl.left
    x_lvl_right = x_lvl.right
    x_lvl_2 = x_lvl.lvl
    x_lvl_ptr_2 = x_lvl_2.ptr
    x_lvl_left_2 = x_lvl_2.left
    x_lvl_right_2 = x_lvl_2.right
    x_lvl_2_val = x_lvl_2.lvl.val
    y_lvl = (((ex.bodies[2]).body.body.rhs.args[1]).args[2]).tns.bind.lvl
    y_lvl_ptr = y_lvl.ptr
    y_lvl_left = y_lvl.left
    y_lvl_right = y_lvl.right
    y_lvl_2 = y_lvl.lvl
    y_lvl_ptr_2 = y_lvl_2.ptr
    y_lvl_left_2 = y_lvl_2.left
    y_lvl_right_2 = y_lvl_2.right
    y_lvl_2_val = y_lvl_2.lvl.val
    y_lvl_2.shape == x_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl_2.shape) != $(x_lvl_2.shape))"))
    y_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(x_lvl.shape))"))
    s_val = 0
    y_lvl_q = y_lvl_ptr[1]
    y_lvl_q_stop = y_lvl_ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i_end = y_lvl_right[y_lvl_q_stop - 1]
    else
        y_lvl_i_end = 0.0f0
    end
    x_lvl_q = x_lvl_ptr[1]
    x_lvl_q_stop = x_lvl_ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i_end = x_lvl_right[x_lvl_q_stop - 1]
    else
        x_lvl_i_end = 0.0f0
    end
    phase_stop = min(y_lvl.shape, y_lvl_i_end, x_lvl_i_end)
    if phase_stop >= limit(1.0)
        i = limit(1.0)
        if y_lvl_right[y_lvl_q] < limit(1.0)
            y_lvl_q = Finch.scansearch(y_lvl_right, limit(1.0), y_lvl_q, y_lvl_q_stop - 1)
        end
        if x_lvl_right[x_lvl_q] < limit(1.0)
            x_lvl_q = Finch.scansearch(x_lvl_right, limit(1.0), x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop
            y_lvl_i_start = y_lvl_left[y_lvl_q]
            y_lvl_i_stop = y_lvl_right[y_lvl_q]
            x_lvl_i_start = x_lvl_left[x_lvl_q]
            x_lvl_i_stop = x_lvl_right[x_lvl_q]
            phase_start_2 = i
            phase_stop_2 = min(x_lvl_i_stop, phase_stop, y_lvl_i_stop)
            phase_start_4 = max(phase_start_2, y_lvl_i_start)
            phase_stop_4 = min(phase_stop_2, limit(0-ϵ) + x_lvl_i_start)
            if phase_stop_4 >= phase_start_4
                y_lvl_2_q = y_lvl_ptr_2[y_lvl_q]
                y_lvl_2_q_stop = y_lvl_ptr_2[y_lvl_q + 1]
                if y_lvl_2_q < y_lvl_2_q_stop
                    y_lvl_2_i_end = y_lvl_right_2[y_lvl_2_q_stop - 1]
                else
                    y_lvl_2_i_end = 0.0f0
                end
                phase_stop_5 = min(y_lvl_2.shape, y_lvl_2_i_end)
                if phase_stop_5 >= limit(1.0)
                    j = limit(1.0)
                    if y_lvl_right_2[y_lvl_2_q] < limit(1.0)
                        y_lvl_2_q = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q, y_lvl_2_q_stop - 1)
                    end
                    while true
                        j_start_2 = j
                        y_lvl_2_i_start = y_lvl_left_2[y_lvl_2_q]
                        y_lvl_2_i_stop = y_lvl_right_2[y_lvl_2_q]
                        if y_lvl_2_i_stop < phase_stop_5
                            phase_start_7 = max(j_start_2, y_lvl_2_i_start)
                            if y_lvl_2_i_stop >= phase_start_7
                                y_lvl_3_val = y_lvl_2_val[y_lvl_2_q]
                                s_val = s_val + drop_eps(-phase_start_4 + phase_stop_4) * drop_eps(-phase_start_7 + y_lvl_2_i_stop) * y_lvl_3_val
                            end
                            y_lvl_2_q += y_lvl_2_i_stop == y_lvl_2_i_stop
                            j = y_lvl_2_i_stop + limit(0+ϵ)
                        else
                            phase_start_8 = j
                            phase_stop_9 = min(y_lvl_2_i_stop, phase_stop_5)
                            phase_start_10 = max(y_lvl_2_i_start, phase_start_8)
                            if phase_stop_9 >= phase_start_10
                                y_lvl_3_val_2 = y_lvl_2_val[y_lvl_2_q]
                                s_val = s_val + drop_eps(-phase_start_4 + phase_stop_4) * drop_eps(-phase_start_10 + phase_stop_9) * y_lvl_3_val_2
                            end
                            y_lvl_2_q += phase_stop_9 == y_lvl_2_i_stop
                            j = phase_stop_9 + limit(0+ϵ)
                            break
                        end
                    end
                end
            end
            phase_start_12 = max(phase_start_2, x_lvl_i_start)
            phase_stop_13 = min(phase_stop_2, limit(0-ϵ) + y_lvl_i_start)
            if phase_stop_13 >= phase_start_12
                x_lvl_2_q = x_lvl_ptr_2[x_lvl_q]
                x_lvl_2_q_stop = x_lvl_ptr_2[x_lvl_q + 1]
                if x_lvl_2_q < x_lvl_2_q_stop
                    x_lvl_2_i_end = x_lvl_right_2[x_lvl_2_q_stop - 1]
                else
                    x_lvl_2_i_end = 0.0f0
                end
                phase_stop_14 = min(y_lvl_2.shape, x_lvl_2_i_end)
                if phase_stop_14 >= limit(1.0)
                    j = limit(1.0)
                    if x_lvl_right_2[x_lvl_2_q] < limit(1.0)
                        x_lvl_2_q = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q, x_lvl_2_q_stop - 1)
                    end
                    while true
                        j_start_6 = j
                        x_lvl_2_i_start = x_lvl_left_2[x_lvl_2_q]
                        x_lvl_2_i_stop = x_lvl_right_2[x_lvl_2_q]
                        if x_lvl_2_i_stop < phase_stop_14
                            phase_start_15 = max(j_start_6, x_lvl_2_i_start)
                            if x_lvl_2_i_stop >= phase_start_15
                                x_lvl_3_val = x_lvl_2_val[x_lvl_2_q]
                                s_val = s_val + drop_eps(-phase_start_12 + phase_stop_13) * drop_eps(-phase_start_15 + x_lvl_2_i_stop) * x_lvl_3_val
                            end
                            x_lvl_2_q += x_lvl_2_i_stop == x_lvl_2_i_stop
                            j = x_lvl_2_i_stop + limit(0+ϵ)
                        else
                            phase_start_16 = j
                            phase_stop_18 = min(x_lvl_2_i_stop, phase_stop_14)
                            phase_start_18 = max(x_lvl_2_i_start, phase_start_16)
                            if phase_stop_18 >= phase_start_18
                                x_lvl_3_val_2 = x_lvl_2_val[x_lvl_2_q]
                                s_val = s_val + drop_eps(-phase_start_12 + phase_stop_13) * drop_eps(-phase_start_18 + phase_stop_18) * x_lvl_3_val_2
                            end
                            x_lvl_2_q += phase_stop_18 == x_lvl_2_i_stop
                            j = phase_stop_18 + limit(0+ϵ)
                            break
                        end
                    end
                end
            end
            phase_start_20 = max(phase_start_2, y_lvl_i_start, x_lvl_i_start)
            if phase_stop_2 >= phase_start_20
                x_lvl_2_q_2 = x_lvl_ptr_2[x_lvl_q]
                x_lvl_2_q_stop_2 = x_lvl_ptr_2[x_lvl_q + 1]
                if x_lvl_2_q_2 < x_lvl_2_q_stop_2
                    x_lvl_2_i_end_2 = x_lvl_right_2[x_lvl_2_q_stop_2 - 1]
                else
                    x_lvl_2_i_end_2 = 0.0f0
                end
                y_lvl_2_q_2 = y_lvl_ptr_2[y_lvl_q]
                y_lvl_2_q_stop_2 = y_lvl_ptr_2[y_lvl_q + 1]
                if y_lvl_2_q_2 < y_lvl_2_q_stop_2
                    y_lvl_2_i_end_2 = y_lvl_right_2[y_lvl_2_q_stop_2 - 1]
                else
                    y_lvl_2_i_end_2 = 0.0f0
                end
                phase_stop_23 = min(y_lvl_2.shape, x_lvl_2_i_end_2, y_lvl_2_i_end_2)
                if phase_stop_23 >= limit(1.0)
                    j = limit(1.0)
                    if x_lvl_right_2[x_lvl_2_q_2] < limit(1.0)
                        x_lvl_2_q_2 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_2, x_lvl_2_q_stop_2 - 1)
                    end
                    if y_lvl_right_2[y_lvl_2_q_2] < limit(1.0)
                        y_lvl_2_q_2 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_2, y_lvl_2_q_stop_2 - 1)
                    end
                    while j <= phase_stop_23
                        x_lvl_2_i_start_2 = x_lvl_left_2[x_lvl_2_q_2]
                        x_lvl_2_i_stop_2 = x_lvl_right_2[x_lvl_2_q_2]
                        y_lvl_2_i_start_2 = y_lvl_left_2[y_lvl_2_q_2]
                        y_lvl_2_i_stop_2 = y_lvl_right_2[y_lvl_2_q_2]
                        phase_start_22 = j
                        phase_stop_24 = min(y_lvl_2_i_stop_2, phase_stop_23, x_lvl_2_i_stop_2)
                        phase_start_24 = max(phase_start_22, x_lvl_2_i_start_2)
                        phase_stop_26 = min(phase_stop_24, limit(0-ϵ) + y_lvl_2_i_start_2)
                        if phase_stop_26 >= phase_start_24
                            x_lvl_3_val_3 = x_lvl_2_val[x_lvl_2_q_2]
                            s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_24 + phase_stop_26) * x_lvl_3_val_3
                        end
                        phase_start_25 = max(phase_start_22, y_lvl_2_i_start_2)
                        phase_stop_27 = min(phase_stop_24, limit(0-ϵ) + x_lvl_2_i_start_2)
                        if phase_stop_27 >= phase_start_25
                            y_lvl_3_val_3 = y_lvl_2_val[y_lvl_2_q_2]
                            s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_25 + phase_stop_27) * y_lvl_3_val_3
                        end
                        phase_start_26 = max(phase_start_22, x_lvl_2_i_start_2, y_lvl_2_i_start_2)
                        if phase_stop_24 >= phase_start_26
                            y_lvl_3_val_4 = y_lvl_2_val[y_lvl_2_q_2]
                            x_lvl_3_val_4 = x_lvl_2_val[x_lvl_2_q_2]
                            s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_26 + phase_stop_24) * (x_lvl_3_val_4 + y_lvl_3_val_4)
                        end
                        x_lvl_2_q_2 += phase_stop_24 == x_lvl_2_i_stop_2
                        y_lvl_2_q_2 += phase_stop_24 == y_lvl_2_i_stop_2
                        j = phase_stop_24 + limit(0+ϵ)
                    end
                end
                phase_start_27 = max(1.0f0, limit(0+ϵ) + x_lvl_2_i_end_2)
                phase_stop_29 = min(y_lvl_2.shape, y_lvl_2_i_end_2)
                if phase_stop_29 >= phase_start_27
                    j = phase_start_27
                    if y_lvl_right_2[y_lvl_2_q_2] < phase_start_27
                        y_lvl_2_q_2 = Finch.scansearch(y_lvl_right_2, phase_start_27, y_lvl_2_q_2, y_lvl_2_q_stop_2 - 1)
                    end
                    while true
                        j_start_12 = j
                        y_lvl_2_i_start_2 = y_lvl_left_2[y_lvl_2_q_2]
                        y_lvl_2_i_stop_2 = y_lvl_right_2[y_lvl_2_q_2]
                        if y_lvl_2_i_stop_2 < phase_stop_29
                            phase_start_29 = max(y_lvl_2_i_start_2, j_start_12)
                            if y_lvl_2_i_stop_2 >= phase_start_29
                                y_lvl_3_val_5 = y_lvl_2_val[y_lvl_2_q_2]
                                s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_29 + y_lvl_2_i_stop_2) * y_lvl_3_val_5
                            end
                            y_lvl_2_q_2 += y_lvl_2_i_stop_2 == y_lvl_2_i_stop_2
                            j = y_lvl_2_i_stop_2 + limit(0+ϵ)
                        else
                            phase_start_30 = j
                            phase_stop_33 = min(y_lvl_2_i_stop_2, phase_stop_29)
                            phase_start_32 = max(y_lvl_2_i_start_2, phase_start_30)
                            if phase_stop_33 >= phase_start_32
                                y_lvl_3_val_6 = y_lvl_2_val[y_lvl_2_q_2]
                                s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_32 + phase_stop_33) * y_lvl_3_val_6
                            end
                            y_lvl_2_q_2 += phase_stop_33 == y_lvl_2_i_stop_2
                            j = phase_stop_33 + limit(0+ϵ)
                            break
                        end
                    end
                end
                phase_start_33 = max(1.0f0, limit(0+ϵ) + y_lvl_2_i_end_2)
                phase_stop_36 = min(y_lvl_2.shape, x_lvl_2_i_end_2)
                if phase_stop_36 >= phase_start_33
                    j = phase_start_33
                    if x_lvl_right_2[x_lvl_2_q_2] < phase_start_33
                        x_lvl_2_q_2 = Finch.scansearch(x_lvl_right_2, phase_start_33, x_lvl_2_q_2, x_lvl_2_q_stop_2 - 1)
                    end
                    while true
                        j_start_15 = j
                        x_lvl_2_i_start_2 = x_lvl_left_2[x_lvl_2_q_2]
                        x_lvl_2_i_stop_2 = x_lvl_right_2[x_lvl_2_q_2]
                        if x_lvl_2_i_stop_2 < phase_stop_36
                            phase_start_35 = max(x_lvl_2_i_start_2, j_start_15)
                            if x_lvl_2_i_stop_2 >= phase_start_35
                                x_lvl_3_val_5 = x_lvl_2_val[x_lvl_2_q_2]
                                s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_35 + x_lvl_2_i_stop_2) * x_lvl_3_val_5
                            end
                            x_lvl_2_q_2 += x_lvl_2_i_stop_2 == x_lvl_2_i_stop_2
                            j = x_lvl_2_i_stop_2 + limit(0+ϵ)
                        else
                            phase_start_36 = j
                            phase_stop_40 = min(x_lvl_2_i_stop_2, phase_stop_36)
                            phase_start_38 = max(x_lvl_2_i_start_2, phase_start_36)
                            if phase_stop_40 >= phase_start_38
                                x_lvl_3_val_6 = x_lvl_2_val[x_lvl_2_q_2]
                                s_val = s_val + drop_eps(-phase_start_20 + phase_stop_2) * drop_eps(-phase_start_38 + phase_stop_40) * x_lvl_3_val_6
                            end
                            x_lvl_2_q_2 += phase_stop_40 == x_lvl_2_i_stop_2
                            j = phase_stop_40 + limit(0+ϵ)
                            break
                        end
                    end
                end
            end
            y_lvl_q += phase_stop_2 == y_lvl_i_stop
            x_lvl_q += phase_stop_2 == x_lvl_i_stop
            i = phase_stop_2 + limit(0+ϵ)
        end
    end
    phase_start_40 = max(1.0f0, limit(0+ϵ) + y_lvl_i_end)
    phase_stop_44 = min(y_lvl.shape, x_lvl_i_end)
    if phase_stop_44 >= phase_start_40
        i = phase_start_40
        if x_lvl_right[x_lvl_q] < phase_start_40
            x_lvl_q = Finch.scansearch(x_lvl_right, phase_start_40, x_lvl_q, x_lvl_q_stop - 1)
        end
        while true
            i_start_4 = i
            x_lvl_i_start = x_lvl_left[x_lvl_q]
            x_lvl_i_stop = x_lvl_right[x_lvl_q]
            if x_lvl_i_stop < phase_stop_44
                phase_start_42 = max(x_lvl_i_start, i_start_4)
                if x_lvl_i_stop >= phase_start_42
                    x_lvl_2_q_3 = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop_3 = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q_3 < x_lvl_2_q_stop_3
                        x_lvl_2_i_end_3 = x_lvl_right_2[x_lvl_2_q_stop_3 - 1]
                    else
                        x_lvl_2_i_end_3 = 0.0f0
                    end
                    phase_stop_48 = min(y_lvl_2.shape, x_lvl_2_i_end_3)
                    if phase_stop_48 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q_3] < limit(1.0)
                            x_lvl_2_q_3 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_3, x_lvl_2_q_stop_3 - 1)
                        end
                        while true
                            j_start_19 = j
                            x_lvl_2_i_start_3 = x_lvl_left_2[x_lvl_2_q_3]
                            x_lvl_2_i_stop_3 = x_lvl_right_2[x_lvl_2_q_3]
                            if x_lvl_2_i_stop_3 < phase_stop_48
                                phase_start_45 = max(j_start_19, x_lvl_2_i_start_3)
                                if x_lvl_2_i_stop_3 >= phase_start_45
                                    x_lvl_3_val_7 = x_lvl_2_val[x_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_42 + x_lvl_i_stop) * drop_eps(-phase_start_45 + x_lvl_2_i_stop_3) * x_lvl_3_val_7
                                end
                                x_lvl_2_q_3 += x_lvl_2_i_stop_3 == x_lvl_2_i_stop_3
                                j = x_lvl_2_i_stop_3 + limit(0+ϵ)
                            else
                                phase_start_46 = j
                                phase_stop_52 = min(x_lvl_2_i_stop_3, phase_stop_48)
                                phase_start_48 = max(x_lvl_2_i_start_3, phase_start_46)
                                if phase_stop_52 >= phase_start_48
                                    x_lvl_3_val_8 = x_lvl_2_val[x_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_42 + x_lvl_i_stop) * drop_eps(-phase_start_48 + phase_stop_52) * x_lvl_3_val_8
                                end
                                x_lvl_2_q_3 += phase_stop_52 == x_lvl_2_i_stop_3
                                j = phase_stop_52 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                x_lvl_q += x_lvl_i_stop == x_lvl_i_stop
                i = x_lvl_i_stop + limit(0+ϵ)
            else
                phase_start_50 = i
                phase_stop_56 = min(x_lvl_i_stop, phase_stop_44)
                phase_start_52 = max(x_lvl_i_start, phase_start_50)
                if phase_stop_56 >= phase_start_52
                    x_lvl_2_q_4 = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop_4 = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q_4 < x_lvl_2_q_stop_4
                        x_lvl_2_i_end_4 = x_lvl_right_2[x_lvl_2_q_stop_4 - 1]
                    else
                        x_lvl_2_i_end_4 = 0.0f0
                    end
                    phase_stop_59 = min(y_lvl_2.shape, x_lvl_2_i_end_4)
                    if phase_stop_59 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q_4] < limit(1.0)
                            x_lvl_2_q_4 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_4, x_lvl_2_q_stop_4 - 1)
                        end
                        while true
                            j_start_23 = j
                            x_lvl_2_i_start_4 = x_lvl_left_2[x_lvl_2_q_4]
                            x_lvl_2_i_stop_4 = x_lvl_right_2[x_lvl_2_q_4]
                            if x_lvl_2_i_stop_4 < phase_stop_59
                                phase_start_55 = max(j_start_23, x_lvl_2_i_start_4)
                                if x_lvl_2_i_stop_4 >= phase_start_55
                                    x_lvl_3_val_9 = x_lvl_2_val[x_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_52 + phase_stop_56) * drop_eps(-phase_start_55 + x_lvl_2_i_stop_4) * x_lvl_3_val_9
                                end
                                x_lvl_2_q_4 += x_lvl_2_i_stop_4 == x_lvl_2_i_stop_4
                                j = x_lvl_2_i_stop_4 + limit(0+ϵ)
                            else
                                phase_start_56 = j
                                phase_stop_63 = min(x_lvl_2_i_stop_4, phase_stop_59)
                                phase_start_58 = max(x_lvl_2_i_start_4, phase_start_56)
                                if phase_stop_63 >= phase_start_58
                                    x_lvl_3_val_10 = x_lvl_2_val[x_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_52 + phase_stop_56) * drop_eps(-phase_start_58 + phase_stop_63) * x_lvl_3_val_10
                                end
                                x_lvl_2_q_4 += phase_stop_63 == x_lvl_2_i_stop_4
                                j = phase_stop_63 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                x_lvl_q += phase_stop_56 == x_lvl_i_stop
                i = phase_stop_56 + limit(0+ϵ)
                break
            end
        end
    end
    phase_start_60 = max(1.0f0, limit(0+ϵ) + x_lvl_i_end)
    phase_stop_67 = min(y_lvl.shape, y_lvl_i_end)
    if phase_stop_67 >= phase_start_60
        i = phase_start_60
        if y_lvl_right[y_lvl_q] < phase_start_60
            y_lvl_q = Finch.scansearch(y_lvl_right, phase_start_60, y_lvl_q, y_lvl_q_stop - 1)
        end
        while true
            i_start_7 = i
            y_lvl_i_start = y_lvl_left[y_lvl_q]
            y_lvl_i_stop = y_lvl_right[y_lvl_q]
            if y_lvl_i_stop < phase_stop_67
                phase_start_62 = max(y_lvl_i_start, i_start_7)
                if y_lvl_i_stop >= phase_start_62
                    y_lvl_2_q_3 = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop_3 = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q_3 < y_lvl_2_q_stop_3
                        y_lvl_2_i_end_3 = y_lvl_right_2[y_lvl_2_q_stop_3 - 1]
                    else
                        y_lvl_2_i_end_3 = 0.0f0
                    end
                    phase_stop_71 = min(y_lvl_2.shape, y_lvl_2_i_end_3)
                    if phase_stop_71 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right_2[y_lvl_2_q_3] < limit(1.0)
                            y_lvl_2_q_3 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_3, y_lvl_2_q_stop_3 - 1)
                        end
                        while true
                            j_start_27 = j
                            y_lvl_2_i_start_3 = y_lvl_left_2[y_lvl_2_q_3]
                            y_lvl_2_i_stop_3 = y_lvl_right_2[y_lvl_2_q_3]
                            if y_lvl_2_i_stop_3 < phase_stop_71
                                phase_start_65 = max(j_start_27, y_lvl_2_i_start_3)
                                if y_lvl_2_i_stop_3 >= phase_start_65
                                    y_lvl_3_val_7 = y_lvl_2_val[y_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_62 + y_lvl_i_stop) * drop_eps(-phase_start_65 + y_lvl_2_i_stop_3) * y_lvl_3_val_7
                                end
                                y_lvl_2_q_3 += y_lvl_2_i_stop_3 == y_lvl_2_i_stop_3
                                j = y_lvl_2_i_stop_3 + limit(0+ϵ)
                            else
                                phase_start_66 = j
                                phase_stop_75 = min(y_lvl_2_i_stop_3, phase_stop_71)
                                phase_start_68 = max(y_lvl_2_i_start_3, phase_start_66)
                                if phase_stop_75 >= phase_start_68
                                    y_lvl_3_val_8 = y_lvl_2_val[y_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_62 + y_lvl_i_stop) * drop_eps(-phase_start_68 + phase_stop_75) * y_lvl_3_val_8
                                end
                                y_lvl_2_q_3 += phase_stop_75 == y_lvl_2_i_stop_3
                                j = phase_stop_75 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                y_lvl_q += y_lvl_i_stop == y_lvl_i_stop
                i = y_lvl_i_stop + limit(0+ϵ)
            else
                phase_start_70 = i
                phase_stop_79 = min(y_lvl_i_stop, phase_stop_67)
                phase_start_72 = max(y_lvl_i_start, phase_start_70)
                if phase_stop_79 >= phase_start_72
                    y_lvl_2_q_4 = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop_4 = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q_4 < y_lvl_2_q_stop_4
                        y_lvl_2_i_end_4 = y_lvl_right_2[y_lvl_2_q_stop_4 - 1]
                    else
                        y_lvl_2_i_end_4 = 0.0f0
                    end
                    phase_stop_82 = min(y_lvl_2.shape, y_lvl_2_i_end_4)
                    if phase_stop_82 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right_2[y_lvl_2_q_4] < limit(1.0)
                            y_lvl_2_q_4 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_4, y_lvl_2_q_stop_4 - 1)
                        end
                        while true
                            j_start_31 = j
                            y_lvl_2_i_start_4 = y_lvl_left_2[y_lvl_2_q_4]
                            y_lvl_2_i_stop_4 = y_lvl_right_2[y_lvl_2_q_4]
                            if y_lvl_2_i_stop_4 < phase_stop_82
                                phase_start_75 = max(j_start_31, y_lvl_2_i_start_4)
                                if y_lvl_2_i_stop_4 >= phase_start_75
                                    y_lvl_3_val_9 = y_lvl_2_val[y_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_72 + phase_stop_79) * drop_eps(-phase_start_75 + y_lvl_2_i_stop_4) * y_lvl_3_val_9
                                end
                                y_lvl_2_q_4 += y_lvl_2_i_stop_4 == y_lvl_2_i_stop_4
                                j = y_lvl_2_i_stop_4 + limit(0+ϵ)
                            else
                                phase_start_76 = j
                                phase_stop_86 = min(y_lvl_2_i_stop_4, phase_stop_82)
                                phase_start_78 = max(y_lvl_2_i_start_4, phase_start_76)
                                if phase_stop_86 >= phase_start_78
                                    y_lvl_3_val_10 = y_lvl_2_val[y_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_72 + phase_stop_79) * drop_eps(-phase_start_78 + phase_stop_86) * y_lvl_3_val_10
                                end
                                y_lvl_2_q_4 += phase_stop_86 == y_lvl_2_i_stop_4
                                j = phase_stop_86 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                y_lvl_q += phase_stop_79 == y_lvl_i_stop
                i = phase_stop_79 + limit(0+ϵ)
                break
            end
        end
    end
    (s = (Scalar){0, Int64}(s_val),)
end
julia> @finch begin
        s .= 0
        for i = _, j = _
            s[] += (x[j, i] + y[j, i]) * d(i, j)
        end
    end
(s = Scalar{0, Int64}(5238),)

